hook.system.activity:android.app.Activity onCreate android.os.Bundle;\
    android.app.Activity onStart;\
    android.app.Activity onResume;\
    android.app.Activity onPause;\
    android.app.Activity onStop;\
    android.view.View setOnClickListener android.view.View$OnClickListener;\
    android.app.Activity onDestroy
hook.system.thread:java.lang.Thread start
hook.system.handler:[static] android.os.Message obtain;\
    android.os.Handler enqueueMessage android.os.MessageQueue android.os.Message long;\
    android.os.Handler dispatchMessage android.os.Message;\
    android.os.Handler post java.lang.Runnable;\
    android.os.Handler postAtTime java.lang.Runnable long;\
    android.os.Handler postAtTime java.lang.Runnable java.lang.Object long;\
    android.os.Handler postDelayed java.lang.Runnable long;\
    android.os.Handler postAtFrontOfQueue java.lang.Runnable;\
    android.os.Handler sendMessage android.os.Message;\
    android.os.Handler sendEmptyMessage int;\
    android.os.Handler sendEmptyMessageDelayed int long;\
    android.os.Handler sendEmptyMessageAtTime int long;\
    android.os.Handler sendMessageAtFrontOfQueue android.os.Message;\
    android.os.Handler sendMessageDelayed android.os.Message long;\
    android.os.Handler sendMessageAtTime android.os.Message long
hook.system.asynctask:android.os.AsyncTask execute [java.lang.Object;\
    android.os.AsyncTask publishProgress [java.lang.Object;\
    android.os.AsyncTask executeOnExecutor java.util.concurrent.Executor [java.lang.Object
hook[cn.mijack.app]:
hook[cn.mijack.asynctaskdemo]:
hook[cn.mijack.demo]:
hook[cn.mijack.droidstitcherdemo]:
hook[cn.mijack.rundroiddemo]:
hook[cn.mijack.rundroiddemo.test]:
settings[is_log_state]:false
settings[debug_state]:true